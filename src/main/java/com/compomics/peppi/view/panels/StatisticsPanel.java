package com.compomics.peppi.view.panels;

import com.compomics.peppi.FaultBarrier;
import com.compomics.peppi.model.AnalysisGroup;
import com.compomics.peppi.model.Peptide;
import com.compomics.peppi.model.PeptideGroup;
import com.compomics.peppi.model.Project;
import com.compomics.peppi.model.Protein;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.image.BufferedImage;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

/**
 *
 * @author Davy
 */
public class StatisticsPanel extends javax.swing.JPanel {

    private AnalysisGroup analysisGroup;

    /**
     * Creates new form StatisticsPanel
     */
    public StatisticsPanel() {
        initComponents();
    }

    public StatisticsPanel(AnalysisGroup group) {
        this();
        this.analysisGroup = group;
        new runStatistics(analysisGroup).run();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        onceFoundList = new javax.swing.JList();
        jScrollPane2 = new javax.swing.JScrollPane();
        twiceFoundList = new javax.swing.JList();
        jScrollPane3 = new javax.swing.JScrollPane();
        multipleFoundList = new javax.swing.JList();
        percentageOnceFoundLabel = new javax.swing.JLabel();
        percentageTwiceFoundLabel = new javax.swing.JLabel();
        percentageMultipleFoundLabel = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        histogramPanel1 = new com.compomics.peppi.view.panels.HistogramPanel();

        onceFoundList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jScrollPane1.setViewportView(onceFoundList);

        twiceFoundList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jScrollPane2.setViewportView(twiceFoundList);

        multipleFoundList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jScrollPane3.setViewportView(multipleFoundList);

        percentageOnceFoundLabel.setText("jLabel1");

        percentageTwiceFoundLabel.setText("jLabel2");

        percentageMultipleFoundLabel.setText("jLabel3");

        jLabel1.setText("proteins mapping one distinct peptidegroup");

        jLabel2.setText("proteins mapping two distinct peptide groups");

        jLabel3.setText("proteins mapping more than 2 distinct peptide groups");

        javax.swing.GroupLayout histogramPanel1Layout = new javax.swing.GroupLayout(histogramPanel1);
        histogramPanel1.setLayout(histogramPanel1Layout);
        histogramPanel1Layout.setHorizontalGroup(
            histogramPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 628, Short.MAX_VALUE)
        );
        histogramPanel1Layout.setVerticalGroup(
            histogramPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 241, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(histogramPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(percentageOnceFoundLabel)
                                    .addComponent(jLabel1))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(18, 18, 18)
                                        .addComponent(jLabel2))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(18, 18, 18)
                                        .addComponent(percentageTwiceFoundLabel))))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(207, 207, 207)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(74, 74, 74)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3)
                            .addComponent(percentageMultipleFoundLabel))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(percentageOnceFoundLabel)
                    .addComponent(percentageMultipleFoundLabel)
                    .addComponent(percentageTwiceFoundLabel))
                .addGap(18, 18, 18)
                .addComponent(histogramPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.compomics.peppi.view.panels.HistogramPanel histogramPanel1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JList multipleFoundList;
    private javax.swing.JList onceFoundList;
    private javax.swing.JLabel percentageMultipleFoundLabel;
    private javax.swing.JLabel percentageOnceFoundLabel;
    private javax.swing.JLabel percentageTwiceFoundLabel;
    private javax.swing.JList twiceFoundList;
    // End of variables declaration//GEN-END:variables

    private final class runStatistics implements Runnable {

        private AnalysisGroup aGroup;

        protected runStatistics(AnalysisGroup group) {
            aGroup = group;
        }

        @Override
        public void run() {
            peptideOccurence(aGroup);
            peptideLengthDistribution(aGroup);
        }

        private void peptideOccurence(AnalysisGroup anAnalysisGroup) {
            //redo this completely with a hashmap containing arraylists
            Set<Protein> onceFound = new HashSet();
            Set<Protein> twiceFound = new HashSet();
            Set<Protein> multipleFound = new HashSet();

            for (Project aProject : anAnalysisGroup) {
                int peptidesFound;
                for (Protein aProjectProtein : aProject.getProteins()) {
                    peptidesFound = aProjectProtein.getPeptideGroupsForProtein().size();
                    if (peptidesFound == 1) {
                        if (onceFound.contains(aProjectProtein)) {
                            twiceFound.add(aProjectProtein);
                            onceFound.remove(aProjectProtein);
                        } else if (twiceFound.contains(aProjectProtein)) {
                            multipleFound.add(aProjectProtein);
                            twiceFound.remove(aProjectProtein);
                        } else {
                            onceFound.add(aProjectProtein);
                        }
                    } else if (peptidesFound > 1) {
                        if (onceFound.contains(aProjectProtein)) {
                            multipleFound.add(aProjectProtein);
                            onceFound.remove(aProjectProtein);
                        } else if (twiceFound.contains(aProjectProtein)) {
                            multipleFound.add(aProjectProtein);
                            twiceFound.remove(aProjectProtein);
                        } else if (peptidesFound == 2) {
                            twiceFound.add(aProjectProtein);
                        } else if (peptidesFound > 2) {
                            multipleFound.add(aProjectProtein);
                        } else {
                            FaultBarrier.getInstance().handleException(new Exception("wut?"));
                        }
                    }
                }
            }
            onceFoundList.setListData(onceFound.toArray());
            twiceFoundList.setListData(twiceFound.toArray());
            multipleFoundList.setListData(multipleFound.toArray());
            int totalFound = onceFound.size() + twiceFound.size() + multipleFound.size();
            percentageOnceFoundLabel.setText(String.valueOf(((double) onceFound.size() / (double) totalFound) * 100) + "%");
            percentageTwiceFoundLabel.setText(String.valueOf(((double) twiceFound.size() / (double) totalFound) * 100) + "%");
            percentageMultipleFoundLabel.setText(String.valueOf(((double) multipleFound.size() / (double) totalFound) * 100) + "%");

        }

        private void peptideLengthDistribution(AnalysisGroup aGroup) {
            HashMap<Integer, HashSet<Protein>> distribution = new HashMap<Integer, HashSet<Protein>>();
            //for for for for for for for for
            for (Project aProject : aGroup) {
                for (Protein aProtein : aProject.getProteins()) {
                    for (PeptideGroup aPeptideGroup : aProtein) {
                        for (Peptide aPeptide : aPeptideGroup) {
                            //todo make an incremental hashmap so this gets less wordy
                            if (distribution.containsKey(aPeptide.getSequence().length())) {
                                distribution.get(aPeptide.getSequence().length()).add(aProtein);
                            } else {
                                distribution.put(aPeptide.getSequence().length(), new HashSet<Protein>());
                            }
                        }
                    }
                }
            }
            histogramPanel1.setDistribution(distribution);
        }
    }
}
