package com.compomics.peppi.view.panels;

import com.compomics.peppi.model.AnalysisGroup;
import com.compomics.peppi.model.Project;
import com.compomics.peppi.model.Protein;
import java.awt.event.KeyEvent;
import java.sql.SQLException;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

/**
 *
 * @author Davy
 */
public class InfoPanel extends javax.swing.JPanel {

    private final DecimalFormat df = new DecimalFormat("0.##");
    private List<PeptidesProteinsOverlapPanel> projectOverlapPanels = new ArrayList<PeptidesProteinsOverlapPanel>();
    //this is also pretty ugly, switch this to analysisgroup
    Project condensedProject = new Project(1, "condensed projects");

    public InfoPanel() {
        initComponents();
        //euch
        projectOverlapPanels.add(peptidesProteinsOverlapPanel1);
        projectOverlapPanels.add(peptidesProteinsOverlapPanel2);
        projectOverlapPanels.add(peptidesProteinsOverlapPanel3);
    }

    public InfoPanel(AnalysisGroup aGroup) {
        this();
        setProjectsToDisplay(aGroup);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        transparencySliderValueTextfield = new javax.swing.JTextField("100");
        transparencySlider = new javax.swing.JSlider();
        sequenceCoveragePanel = new com.compomics.peppi.view.panels.SequenceCoveragePanel();
        condenseProjectsCheckBox = new javax.swing.JCheckBox();
        addPeptideProteinView = new javax.swing.JButton();
        removeViewButton = new javax.swing.JButton();
        peptidesProteinsOverlapPanel1 = new com.compomics.peppi.view.panels.PeptidesProteinsOverlapPanel();
        peptidesProteinsOverlapPanel2 = new com.compomics.peppi.view.panels.PeptidesProteinsOverlapPanel();
        peptidesProteinsOverlapPanel3 = new com.compomics.peppi.view.panels.PeptidesProteinsOverlapPanel();

        jLabel1.setText("Peptide Transparency value ");
        jLabel1.setAlignmentY(0.0F);

        transparencySliderValueTextfield.setMinimumSize(new java.awt.Dimension(30, 20));
        transparencySliderValueTextfield.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                transparencySliderValueTextfieldFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                transparencySliderValueTextfieldFocusLost(evt);
            }
        });
        transparencySliderValueTextfield.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                transparencySliderValueTextfieldKeyTyped(evt);
            }
        });

        transparencySlider.setValue(100);
        transparencySlider.setMinimumSize(new java.awt.Dimension(200, 23));
        transparencySlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                transparencySliderStateChanged(evt);
            }
        });

        condenseProjectsCheckBox.setText("open project view");
        condenseProjectsCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                condenseProjectsCheckBoxActionPerformed(evt);
            }
        });

        addPeptideProteinView.setText("add a view");
        addPeptideProteinView.setEnabled(false);
        addPeptideProteinView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addPeptideProteinViewActionPerformed(evt);
            }
        });

        removeViewButton.setText("remove view");
        removeViewButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeViewButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(condenseProjectsCheckBox)
                        .addGap(59, 59, 59)
                        .addComponent(addPeptideProteinView)
                        .addGap(18, 18, 18)
                        .addComponent(removeViewButton)
                        .addGap(99, 99, 99)
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addComponent(transparencySliderValueTextfield, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(transparencySlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(peptidesProteinsOverlapPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(peptidesProteinsOverlapPanel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(peptidesProteinsOverlapPanel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
            .addComponent(sequenceCoveragePanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(5, 5, 5)
                        .addComponent(condenseProjectsCheckBox))
                    .addComponent(addPeptideProteinView)
                    .addComponent(removeViewButton)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(jLabel1))
                    .addComponent(transparencySliderValueTextfield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(transparencySlider, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(peptidesProteinsOverlapPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(peptidesProteinsOverlapPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(peptidesProteinsOverlapPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(sequenceCoveragePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void transparencySliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_transparencySliderStateChanged
        transparencySliderValueTextfield.setText(Integer.toString(transparencySlider.getValue()));
        for (PeptidesProteinsOverlapPanel panel : projectOverlapPanels) {
            panel.setTransparency(Float.valueOf(df.format((float) transparencySlider.getValue() / 100)));
            panel.revalidate();
            panel.repaint();
        }
    }//GEN-LAST:event_transparencySliderStateChanged

    private void transparencySliderValueTextfieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_transparencySliderValueTextfieldKeyTyped
        if (evt.getKeyChar() == KeyEvent.VK_ENTER) {
            transparencyChanged();
        }
    }//GEN-LAST:event_transparencySliderValueTextfieldKeyTyped

    private void transparencySliderValueTextfieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_transparencySliderValueTextfieldFocusLost
        transparencyChanged();
    }//GEN-LAST:event_transparencySliderValueTextfieldFocusLost

    private void transparencySliderValueTextfieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_transparencySliderValueTextfieldFocusGained
        transparencySliderValueTextfield.selectAll();
    }//GEN-LAST:event_transparencySliderValueTextfieldFocusGained

    private void condenseProjectsCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_condenseProjectsCheckBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_condenseProjectsCheckBoxActionPerformed

    private void addPeptideProteinViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addPeptideProteinViewActionPerformed
        // TODO add your handling code here:
        int visibleCount = 0;
        for (PeptidesProteinsOverlapPanel panel : projectOverlapPanels) {
            if (!panel.isVisible()) {
                panel.setVisible(true);
                visibleCount++;
                break;
            }
            visibleCount++;
        }
        if (visibleCount == 3) {
            addPeptideProteinView.setEnabled(false);
        }
    }//GEN-LAST:event_addPeptideProteinViewActionPerformed

    private void removeViewButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeViewButtonActionPerformed
        // TODO add your handling code here:
        for (PeptidesProteinsOverlapPanel aProjectPanel : projectOverlapPanels) {
            if (aProjectPanel.isVisible()) {
                aProjectPanel.setVisible(false);
                addPeptideProteinView.setEnabled(true);
                break;
            }
        }
    }//GEN-LAST:event_removeViewButtonActionPerformed
    private void transparencyChanged() {
        try {
            transparencySlider.setValue(Integer.parseInt(transparencySliderValueTextfield.getText()));
            for (PeptidesProteinsOverlapPanel panel : projectOverlapPanels) {
                panel.setTransparency(Float.valueOf(df.format((float) transparencySlider.getValue() / 100)));
                panel.revalidate();
                panel.repaint();
            }
        } catch (NumberFormatException e) {
            transparencySlider.setValue(100);
            transparencySliderValueTextfield.setText("100");
            for (PeptidesProteinsOverlapPanel panel : projectOverlapPanels) {
                panel.setTransparency((float) 100 / 100);
                panel.revalidate();
                panel.repaint();
            }
        }
    }

    public void updateProteinGraphics(Protein proteinOfInterest) throws SQLException {
        sequenceCoveragePanel.showProteinCoverage(proteinOfInterest.getProteinSequence(), proteinOfInterest.getPeptideGroupsForProtein().iterator());

        for (PeptidesProteinsOverlapPanel panel : projectOverlapPanels) {
            panel.setProtein(proteinOfInterest);
            panel.revalidate();
            panel.repaint();
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addPeptideProteinView;
    private javax.swing.JCheckBox condenseProjectsCheckBox;
    private javax.swing.JLabel jLabel1;
    private com.compomics.peppi.view.panels.PeptidesProteinsOverlapPanel peptidesProteinsOverlapPanel1;
    private com.compomics.peppi.view.panels.PeptidesProteinsOverlapPanel peptidesProteinsOverlapPanel2;
    private com.compomics.peppi.view.panels.PeptidesProteinsOverlapPanel peptidesProteinsOverlapPanel3;
    private javax.swing.JButton removeViewButton;
    private com.compomics.peppi.view.panels.SequenceCoveragePanel sequenceCoveragePanel;
    private javax.swing.JSlider transparencySlider;
    private javax.swing.JTextField transparencySliderValueTextfield;
    // End of variables declaration//GEN-END:variables

    public void setProjectsToDisplay(List<Project> toCompareProjects, boolean condense) {
        Set<Protein> condensedProteins = new HashSet<Protein>();
        if (condense) {
            for (Project project : toCompareProjects) {
                condensedProteins.addAll(project.getProteins());
            }
            condensedProject.setProteins(condensedProteins);
        }
        this.revalidate();
        this.repaint();

    }

    public Project getCondensedProject() {
        return condensedProject;
    }

    public final void setProjectsToDisplay(List<Project> toCompareProjects) {
        setProjectsToDisplay(toCompareProjects, true);
    }
}