package com.compomics.peppi.view.panels;

import com.compomics.peppi.model.Project;
import com.compomics.peppi.model.Protein;
import com.compomics.peppi.view.DrawModes.Peptides.QuantedPeptideDrawMode;
import com.compomics.peppi.view.DrawModes.Proteins.DomainProteinDrawMode;
import com.compomics.peppi.view.DrawModes.Proteins.HydrophilicityProteinDrawMode;
import com.compomics.peppi.view.DrawModes.Proteins.SecondaryStructureProteinDrawMode;
import com.compomics.peppi.view.DrawModes.StandardPeptideProteinDrawMode;
import java.awt.event.KeyEvent;
import java.sql.SQLException;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.List;
import java.util.Set;

/**
 *
 * @author Davy
 */
public class InfoPanel extends javax.swing.JPanel {

    private final DecimalFormat df = new DecimalFormat("0.##");
    private List<PeptidesProteinsOverlapPanel> projectOverlapPanels = new ArrayList<PeptidesProteinsOverlapPanel>();

    public InfoPanel() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        peptidesProteinsOverlapBarChooser = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        transparencySliderValueTextfield = new javax.swing.JTextField("100");
        transparencySlider = new javax.swing.JSlider();
        sequenceCoveragePanel = new com.compomics.peppi.view.panels.SequenceCoveragePanel();
        quantCheckBox = new javax.swing.JCheckBox();
        jInternalFrame1 = new javax.swing.JInternalFrame();

        peptidesProteinsOverlapBarChooser.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "standard", "hydrophobicity", "secondary structure", "domain" }));
        peptidesProteinsOverlapBarChooser.setMinimumSize(new java.awt.Dimension(122, 20));
        peptidesProteinsOverlapBarChooser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                peptidesProteinsOverlapBarChooserActionPerformed(evt);
            }
        });

        jLabel1.setText("Peptide Transparency value ");
        jLabel1.setAlignmentY(0.0F);

        transparencySliderValueTextfield.setMinimumSize(new java.awt.Dimension(30, 20));
        transparencySliderValueTextfield.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                transparencySliderValueTextfieldFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                transparencySliderValueTextfieldFocusLost(evt);
            }
        });
        transparencySliderValueTextfield.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                transparencySliderValueTextfieldKeyTyped(evt);
            }
        });

        transparencySlider.setValue(100);
        transparencySlider.setMinimumSize(new java.awt.Dimension(200, 23));
        transparencySlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                transparencySliderStateChanged(evt);
            }
        });

        quantCheckBox.setText("show quantitation range of peptides");
        quantCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quantCheckBoxActionPerformed(evt);
            }
        });

        jInternalFrame1.setBorder(null);
        jInternalFrame1.setVisible(true);
        jInternalFrame1.getContentPane().setLayout(new java.awt.FlowLayout());

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jInternalFrame1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(peptidesProteinsOverlapBarChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(quantCheckBox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 101, Short.MAX_VALUE)
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addComponent(transparencySliderValueTextfield, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(transparencySlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(sequenceCoveragePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(peptidesProteinsOverlapBarChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel1)
                        .addComponent(transparencySliderValueTextfield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(quantCheckBox))
                    .addComponent(transparencySlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jInternalFrame1, javax.swing.GroupLayout.DEFAULT_SIZE, 246, Short.MAX_VALUE)
                .addGap(29, 29, 29)
                .addComponent(sequenceCoveragePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void transparencySliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_transparencySliderStateChanged
        transparencySliderValueTextfield.setText(Integer.toString(transparencySlider.getValue()));
        for (PeptidesProteinsOverlapPanel panel : projectOverlapPanels) {
            panel.setTransparency(Float.valueOf(df.format((float) transparencySlider.getValue() / 100)));
            panel.revalidate();
            panel.repaint();
        }
    }//GEN-LAST:event_transparencySliderStateChanged

    private void transparencySliderValueTextfieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_transparencySliderValueTextfieldKeyTyped
        if (evt.getKeyChar() == KeyEvent.VK_ENTER) {
            transparencyChanged();
        }
    }//GEN-LAST:event_transparencySliderValueTextfieldKeyTyped

    private void transparencySliderValueTextfieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_transparencySliderValueTextfieldFocusLost
        transparencyChanged();
    }//GEN-LAST:event_transparencySliderValueTextfieldFocusLost

    private void transparencySliderValueTextfieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_transparencySliderValueTextfieldFocusGained
        transparencySliderValueTextfield.selectAll();
    }//GEN-LAST:event_transparencySliderValueTextfieldFocusGained

    private void peptidesProteinsOverlapBarChooserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_peptidesProteinsOverlapBarChooserActionPerformed
        for (PeptidesProteinsOverlapPanel panel : projectOverlapPanels) {
            switch (peptidesProteinsOverlapBarChooser.getSelectedIndex()) {
                case 0:
                    panel.setProteinDrawMode(new StandardPeptideProteinDrawMode());
                    panel.setPeptideDrawMode(new StandardPeptideProteinDrawMode());
                    break;
                case 1:
                    panel.setProteinDrawMode(new HydrophilicityProteinDrawMode());
                    break;
                case 2:
                    panel.setProteinDrawMode(new SecondaryStructureProteinDrawMode());
                    break;
                case 3:
                    panel.setProteinDrawMode(new DomainProteinDrawMode());
                    break;
                default:
                    panel.setProteinDrawMode(new StandardPeptideProteinDrawMode());
                    panel.setPeptideDrawMode(new StandardPeptideProteinDrawMode());
                    break;
            }
            panel.revalidate();
            panel.repaint();
        }
    }//GEN-LAST:event_peptidesProteinsOverlapBarChooserActionPerformed

    private void quantCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_quantCheckBoxActionPerformed
        if (quantCheckBox.isSelected()) {
            for (PeptidesProteinsOverlapPanel panel : projectOverlapPanels) {
                panel.setPeptideDrawMode(new QuantedPeptideDrawMode());
                panel.revalidate();
                panel.repaint();
            }
        } else {
            for (PeptidesProteinsOverlapPanel panel : projectOverlapPanels) {
                panel.setPeptideDrawMode(new StandardPeptideProteinDrawMode());
                panel.revalidate();
                panel.repaint();
            }
        }
    }//GEN-LAST:event_quantCheckBoxActionPerformed
    private void transparencyChanged() {
        try {
            transparencySlider.setValue(Integer.parseInt(transparencySliderValueTextfield.getText()));
            for (PeptidesProteinsOverlapPanel panel : projectOverlapPanels) {
                panel.setTransparency(Float.valueOf(df.format((float) transparencySlider.getValue() / 100)));
                panel.revalidate();
                panel.repaint();
            }
        } catch (NumberFormatException e) {
            transparencySlider.setValue(100);
            transparencySliderValueTextfield.setText("100");
            for (PeptidesProteinsOverlapPanel panel : projectOverlapPanels) {
                panel.setTransparency((float) 100 / 100);
                panel.revalidate();
                panel.repaint();
            }
        }
    }

    public void updateProteinGraphics(Protein proteinOfInterest) throws SQLException {
        sequenceCoveragePanel.showProteinCoverage(proteinOfInterest.getProteinSequence(), proteinOfInterest.getPeptideGroupsForProtein().iterator());
        for (PeptidesProteinsOverlapPanel panel : projectOverlapPanels) {
            panel.setProtein(proteinOfInterest);
            panel.revalidate();
            panel.repaint();
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JInternalFrame jInternalFrame1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JComboBox peptidesProteinsOverlapBarChooser;
    private javax.swing.JCheckBox quantCheckBox;
    private com.compomics.peppi.view.panels.SequenceCoveragePanel sequenceCoveragePanel;
    private javax.swing.JSlider transparencySlider;
    private javax.swing.JTextField transparencySliderValueTextfield;
    // End of variables declaration//GEN-END:variables

    public void setProjectsToDisplay(List<Project> toCompareProjects) {
        for (Project project : toCompareProjects) {
            PeptidesProteinsOverlapPanel aPanel = new PeptidesProteinsOverlapPanel(project);
            projectOverlapPanels.add(aPanel);
            jInternalFrame1.getContentPane().add(aPanel);
        }
        jInternalFrame1.revalidate();
        jInternalFrame1.repaint();
        this.revalidate();
        this.repaint();
    }
}
