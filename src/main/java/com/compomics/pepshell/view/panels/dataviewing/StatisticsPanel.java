package com.compomics.pepshell.view.panels.dataviewing;

import com.compomics.pepshell.model.AnalysisGroup;
import com.compomics.pepshell.model.Peptide;
import com.compomics.pepshell.model.PeptideGroup;
import com.compomics.pepshell.model.Experiment;
import com.compomics.pepshell.model.Protein;
import java.util.HashMap;
import java.util.HashSet;

/**
 *
 * @author Davy Maddelein
 */
class StatisticsPanel extends javax.swing.JPanel {

    private AnalysisGroup analysisGroup;

    /**
     * Creates new form StatisticsPanel
     */
    private StatisticsPanel() {
        initComponents();
    }

    public StatisticsPanel(AnalysisGroup group) {
        this();
        this.analysisGroup = group;
        new runStatistics(analysisGroup).run();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setBackground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

    private final class runStatistics implements Runnable {

        private AnalysisGroup aGroup;

        runStatistics(AnalysisGroup group) {
            aGroup = group;
        }

        @Override
        public void run() {
            //peptideOccurence(aGroup);
            //peptideLengthDistribution(aGroup);
        }

//        private void peptideOccurence(AnalysisGroup anAnalysisGroup) {
//            //redo this completely with a hashmap containing arraylists
//            Set<Protein> onceFound = new HashSet();
//            Set<Protein> twiceFound = new HashSet();
//            Set<Protein> multipleFound = new HashSet();
//
//            for (Experiment aProject : anAnalysisGroup.getExperiments()) {
//                int peptidesFound;
//                for (Protein aProjectProtein : aProject.getProteins()) {
//                    peptidesFound = aProjectProtein.getPeptideGroupsForProtein().size();
//                    if (peptidesFound == 1) {
//                        if (onceFound.contains(aProjectProtein)) {
//                            twiceFound.add(aProjectProtein);
//                            onceFound.remove(aProjectProtein);
//                        } else if (twiceFound.contains(aProjectProtein)) {
//                            multipleFound.add(aProjectProtein);
//                            twiceFound.remove(aProjectProtein);
//                        } else {
//                            onceFound.add(aProjectProtein);
//                        }
//                    } else if (peptidesFound > 1) {
//                        if (onceFound.contains(aProjectProtein)) {
//                            multipleFound.add(aProjectProtein);
//                            onceFound.remove(aProjectProtein);
//                        } else if (twiceFound.contains(aProjectProtein)) {
//                            multipleFound.add(aProjectProtein);
//                            twiceFound.remove(aProjectProtein);
//                        } else if (peptidesFound == 2) {
//                            twiceFound.add(aProjectProtein);
//                        } else if (peptidesFound > 2) {
//                            multipleFound.add(aProjectProtein);
//                        } else {
//                            FaultBarrier.getInstance().handleException(new Exception("wut?"));
//                        }
//                    }
//                }
//            }
//            onceFoundList.setListData(onceFound.toArray());
//            twiceFoundList.setListData(twiceFound.toArray());
//            multipleFoundList.setListData(multipleFound.toArray());
//            int totalFound = onceFound.size() + twiceFound.size() + multipleFound.size();
//            percentageOnceFoundLabel.setText(String.valueOf(((double) onceFound.size() / (double) totalFound) * 100) + "%");
//            percentageTwiceFoundLabel.setText(String.valueOf(((double) twiceFound.size() / (double) totalFound) * 100) + "%");
//            percentageMultipleFoundLabel.setText(String.valueOf(((double) multipleFound.size() / (double) totalFound) * 100) + "%");
//
//        }

        private void peptideLengthDistribution(AnalysisGroup aGroup) {
            HashMap<Integer, HashSet<Protein>> distribution = new HashMap<>();
            //for for for for for for for for
            for (Experiment aProject : aGroup.getExperiments()) {
                for (Protein aProtein : aProject.getProteins()) {
                    for (PeptideGroup aPeptideGroup : aProtein.getPeptideGroupsForProtein()) {
                        for (Peptide aPeptide : aPeptideGroup.getPeptideList()) {
                            //todo make an incremental hashmap so this gets less wordy
                            if (distribution.containsKey(aPeptide.getSequence().length())) {
                                distribution.get(aPeptide.getSequence().length()).add(aProtein);
                            } else {
                                distribution.put(aPeptide.getSequence().length(), new HashSet<Protein>());
                            }
                        }
                    }
                }
            }
        }
    }
}
