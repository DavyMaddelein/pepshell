package com.compomics.pepshell.view.frames;

import com.compomics.pepshell.view.panels.LinkDbLoginDialog;
import com.compomics.pepshell.DataModeController;
import com.compomics.pepshell.FaultBarrier;
import com.compomics.pepshell.ProgramVariables;
import com.compomics.pepshell.controllers.DAO.DbDAO;
import com.compomics.pepshell.controllers.DataModes.FastaDataMode;
import com.compomics.pepshell.controllers.DataSources.StructureDataSources.InternetStructureDataSource;
import com.compomics.pepshell.controllers.properties.DatabaseProperties;
import com.compomics.pepshell.controllers.properties.ViewProperties;
import com.compomics.pepshell.model.AnalysisGroup;
import com.compomics.pepshell.model.Experiment;
import com.compomics.pepshell.model.Property;
import com.compomics.pepshell.model.Protein;
import com.compomics.pepshell.model.enums.DataBasePropertyEnum;
import com.compomics.pepshell.model.enums.ViewPropertyEnum;
import com.compomics.pepshell.view.panels.LoginDialog;
import java.awt.Point;
import java.io.File;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Enumeration;
import java.util.List;
import java.util.Observable;
import java.util.Observer;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.WindowConstants;
import javax.swing.tree.DefaultMutableTreeNode;

/**
 *
 * @author Davy
 */
public class ProjectSelectionTreeFrame extends javax.swing.JFrame implements Observer {

    private List<Experiment> selectedProjectsList = new ArrayList<Experiment>();
    private FaultBarrier faultBarrier = FaultBarrier.getInstance();
    private Experiment referenceProject;
    private File fastaFile;

    /**
     * Creates new form ProjectSelectionTreeFrame all this is pretty much unsafe
     * when doing reflection
     */
    public ProjectSelectionTreeFrame() {
        this(null);
    }

    public ProjectSelectionTreeFrame(Point aPoint) {
        initComponents();
        filterPanel.setVisible(false);
        jPanel1.setVisible(false);
        //went faster than setting bounds
        int x  = aPoint.x - (this.getWidth() / 2);
        int y = aPoint.y - (this.getHeight() / 2);
        if (x < 0){x = 0;}
        if (y<0){y = 0;}
        this.setLocation(x,y);
        this.pack();
        this.setVisible(true);
        new LoginDialog(this, true, DatabaseProperties.getInstance().getProperties().getProperty(DataBasePropertyEnum.DBUSERNAME.getKey()),
                DatabaseProperties.getInstance().getProperties().getProperty(DataBasePropertyEnum.DBURL.getKey()),
                DatabaseProperties.getInstance().getProperties().getProperty(DataBasePropertyEnum.DBNAME.getKey())).setLocationRelativeTo(this);
        try {
            fillProjectList();
        } catch (Exception ex) {
            faultBarrier.handleException(ex);
            JOptionPane.showMessageDialog(this, "something went wrong while retrieving the list of projects:\n" + ex.getMessage());
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        projectList = new javax.swing.JList();
        jScrollPane2 = new javax.swing.JScrollPane();
        referenceProjectTextBox = new javax.swing.JTextArea();
        addReferenceProjectButton = new javax.swing.JButton();
        removeReferenceProjectButton = new javax.swing.JButton();
        toProjectTreeButton = new javax.swing.JButton();
        addAnalysisGroupButton = new javax.swing.JButton();
        removeAnalysisGroupButton = new javax.swing.JButton();
        removeProjectButton = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        projectTree = new com.compomics.pepshell.view.components.DragAndDropTree();
        analyseButton = new javax.swing.JButton();
        fastaLocationTextField = new javax.swing.JTextField();
        addFastaButton = new javax.swing.JButton();
        ownFastaCheckBox = new javax.swing.JCheckBox();
        filterPanel = new javax.swing.JPanel();
        accessionScrollPane = new javax.swing.JScrollPane();
        accessionTextArea = new javax.swing.JTextArea();
        filterCheckbox = new javax.swing.JCheckBox();
        importSubsetButton = new javax.swing.JButton();
        saveSubsetButton = new javax.swing.JButton();
        makeDbConnectionButton = new javax.swing.JButton();
        filterSubsetCheckBox1 = new javax.swing.JCheckBox();
        filterSubsetCheckBox = new javax.swing.JCheckBox();
        jPanel1 = new javax.swing.JPanel();
        loadAccessionMaskingFile = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jTextField1 = new javax.swing.JTextField();
        jTextField2 = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        addMaskingAccessionButton = new javax.swing.JButton();
        removeAccessionMaskingButton = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        useLinkDbCheckBox = new javax.swing.JCheckBoxMenuItem();
        useInternetCheckBox = new javax.swing.JCheckBoxMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenu3 = new javax.swing.JMenu();
        jRadioButtonMenuItem1 = new javax.swing.JRadioButtonMenuItem();
        jRadioButtonMenuItem2 = new javax.swing.JRadioButtonMenuItem();
        jRadioButtonMenuItem3 = new javax.swing.JRadioButtonMenuItem();
        jCheckBoxMenuItem1 = new javax.swing.JCheckBoxMenuItem();
        jCheckBoxMenuItem2 = new javax.swing.JCheckBoxMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("project selection");
        setBounds(new java.awt.Rectangle(0, 0, 0, 0));
        setMaximumSize(new java.awt.Dimension(707, 609));

        jScrollPane1.setViewportView(projectList);

        referenceProjectTextBox.setColumns(20);
        referenceProjectTextBox.setRows(5);
        referenceProjectTextBox.setMinimumSize(new java.awt.Dimension(232, 92));
        jScrollPane2.setViewportView(referenceProjectTextBox);

        addReferenceProjectButton.setText("add reference project");
        addReferenceProjectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addReferenceProjectButtonActionPerformed(evt);
            }
        });

        removeReferenceProjectButton.setText("remove reference project");
        removeReferenceProjectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeReferenceProjectButtonActionPerformed(evt);
            }
        });

        toProjectTreeButton.setText("add project");
        toProjectTreeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                toProjectTreeButtonActionPerformed(evt);
            }
        });

        addAnalysisGroupButton.setText("add a projectgroup");
        addAnalysisGroupButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addAnalysisGroupButtonActionPerformed(evt);
            }
        });

        removeAnalysisGroupButton.setText("remove selected projectgroup");
        removeAnalysisGroupButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeAnalysisGroupButtonActionPerformed(evt);
            }
        });

        removeProjectButton.setText("remove project");
        removeProjectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeProjectButtonActionPerformed(evt);
            }
        });

        projectTree.setMaximumSize(new java.awt.Dimension(2147483647, 2147483647));
        projectTree.setMinimumSize(new java.awt.Dimension(113, 19));
        jScrollPane3.setViewportView(projectTree);

        analyseButton.setText("proceed...");
        analyseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                analyseButtonActionPerformed(evt);
            }
        });

        fastaLocationTextField.setEditable(false);

        addFastaButton.setText("add fasta");
        addFastaButton.setEnabled(false);
        addFastaButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addFastaButtonActionPerformed(evt);
            }
        });

        ownFastaCheckBox.setText("use own fasta file");
        ownFastaCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ownFastaCheckBoxActionPerformed(evt);
            }
        });

        accessionTextArea.setColumns(20);
        accessionTextArea.setRows(5);
        accessionTextArea.setText("list of accessions separated by enters");
        accessionScrollPane.setViewportView(accessionTextArea);

        filterCheckbox.setText("remove this subset instead");

        importSubsetButton.setText("import subset ...");

        saveSubsetButton.setText("save subset...");

        javax.swing.GroupLayout filterPanelLayout = new javax.swing.GroupLayout(filterPanel);
        filterPanel.setLayout(filterPanelLayout);
        filterPanelLayout.setHorizontalGroup(
            filterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(filterPanelLayout.createSequentialGroup()
                .addGap(4, 4, 4)
                .addComponent(accessionScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 267, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(filterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(filterCheckbox)
                    .addComponent(importSubsetButton)
                    .addComponent(saveSubsetButton))
                .addContainerGap(321, Short.MAX_VALUE))
        );
        filterPanelLayout.setVerticalGroup(
            filterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(filterPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(filterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(filterPanelLayout.createSequentialGroup()
                        .addComponent(filterCheckbox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(importSubsetButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(saveSubsetButton))
                    .addComponent(accessionScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(37, 37, 37))
        );

        makeDbConnectionButton.setText("connect to a database");
        makeDbConnectionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                makeDbConnectionButtonActionPerformed(evt);
            }
        });

        filterSubsetCheckBox1.setText("filter proteins");
        filterSubsetCheckBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filterSubsetCheckBox1ActionPerformed(evt);
            }
        });

        filterSubsetCheckBox.setText("mask proteins");
        filterSubsetCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filterSubsetCheckBoxActionPerformed(evt);
            }
        });

        loadAccessionMaskingFile.setText("load a masking file");

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jTextArea1.setEnabled(false);
        jScrollPane4.setViewportView(jTextArea1);

        jLabel1.setText("original accession");

        jLabel2.setText("masking accession");

        addMaskingAccessionButton.setText("=>");
        addMaskingAccessionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addMaskingAccessionButtonActionPerformed(evt);
            }
        });

        removeAccessionMaskingButton.setText("<=");
        removeAccessionMaskingButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeAccessionMaskingButtonActionPerformed(evt);
            }
        });

        jButton1.setText("remove selected maskings");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(loadAccessionMaskingFile)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jTextField1)
                            .addComponent(jLabel2)
                            .addComponent(jLabel1)
                            .addComponent(jTextField2, javax.swing.GroupLayout.DEFAULT_SIZE, 128, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(removeAccessionMaskingButton, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(addMaskingAccessionButton, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jButton1, javax.swing.GroupLayout.Alignment.TRAILING))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 364, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(loadAccessionMaskingFile)
                .addGap(10, 10, 10)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(addMaskingAccessionButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(removeAccessionMaskingButton)
                        .addGap(18, 18, 18))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel2)
                        .addGap(6, 6, 6)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton1)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(jScrollPane4)
        );

        jMenu1.setText("data sources");

        useLinkDbCheckBox.setSelected(true);
        useLinkDbCheckBox.setText("use link db");
        useLinkDbCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                useLinkDbCheckBoxActionPerformed(evt);
            }
        });
        jMenu1.add(useLinkDbCheckBox);

        useInternetCheckBox.setSelected(true);
        useInternetCheckBox.setText("use internet sources");
        jMenu1.add(useInternetCheckBox);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("retrieval steps");

        jMenu3.setText("translate accessions to");

        jRadioButtonMenuItem1.setSelected(true);
        jRadioButtonMenuItem1.setText("uniprot");
        jMenu3.add(jRadioButtonMenuItem1);

        jRadioButtonMenuItem2.setSelected(true);
        jRadioButtonMenuItem2.setText("swissprot");
        jMenu3.add(jRadioButtonMenuItem2);

        jRadioButtonMenuItem3.setSelected(true);
        jRadioButtonMenuItem3.setText("genbank");
        jMenu3.add(jRadioButtonMenuItem3);

        jMenu2.add(jMenu3);

        jCheckBoxMenuItem1.setSelected(true);
        jCheckBoxMenuItem1.setText("fetch domain-related data");
        jMenu2.add(jCheckBoxMenuItem1);

        jCheckBoxMenuItem2.setSelected(true);
        jCheckBoxMenuItem2.setText("fetch pdb data for proteins");
        jMenu2.add(jCheckBoxMenuItem2);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(filterPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(fastaLocationTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(addFastaButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(analyseButton))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(makeDbConnectionButton)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 238, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                                                .addComponent(addReferenceProjectButton)
                                                .addComponent(removeReferenceProjectButton)
                                                .addComponent(addAnalysisGroupButton)
                                                .addComponent(toProjectTreeButton)
                                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                                    .addGap(30, 30, 30)
                                                    .addComponent(removeProjectButton)))
                                            .addComponent(removeAnalysisGroupButton))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 244, Short.MAX_VALUE)
                                            .addComponent(jScrollPane3)))
                                    .addComponent(ownFastaCheckBox)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(filterSubsetCheckBox1)
                                        .addGap(18, 18, 18)
                                        .addComponent(filterSubsetCheckBox)))
                                .addGap(0, 0, Short.MAX_VALUE)))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(makeDbConnectionButton, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(47, 47, 47)
                        .addComponent(addReferenceProjectButton)
                        .addGap(18, 18, 18)
                        .addComponent(removeReferenceProjectButton)
                        .addGap(86, 86, 86)
                        .addComponent(addAnalysisGroupButton)
                        .addGap(18, 18, 18)
                        .addComponent(toProjectTreeButton)
                        .addGap(18, 18, 18)
                        .addComponent(removeAnalysisGroupButton)
                        .addGap(18, 18, 18)
                        .addComponent(removeProjectButton)
                        .addGap(39, 39, 39)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(fastaLocationTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(addFastaButton))
                        .addGap(18, 18, 18)
                        .addComponent(ownFastaCheckBox))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(49, 49, 49)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 349, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(analyseButton)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(filterSubsetCheckBox)
                    .addComponent(filterSubsetCheckBox1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(filterPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void addReferenceProjectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addReferenceProjectButtonActionPerformed
        if (projectList.getSelectedValue() != null) {
            referenceProject = (Experiment) projectList.getSelectedValue();
            referenceProjectTextBox.setText(referenceProject.getExperimentName());
        }
    }//GEN-LAST:event_addReferenceProjectButtonActionPerformed

    private void removeReferenceProjectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeReferenceProjectButtonActionPerformed
        if (!referenceProjectTextBox.getText().isEmpty()) {
            referenceProject = null;
            referenceProjectTextBox.setText("");
        }
    }//GEN-LAST:event_removeReferenceProjectButtonActionPerformed

    private void toProjectTreeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_toProjectTreeButtonActionPerformed
        if (!selectedProjectsList.contains((Experiment) projectList.getSelectedValue())) {
            DefaultMutableTreeNode projectNode = projectTree.addObject(projectList.getSelectedValue());
            projectNode.setAllowsChildren(false);
            selectedProjectsList.add((Experiment) projectList.getSelectedValue());
        }
    }//GEN-LAST:event_toProjectTreeButtonActionPerformed

    private void addAnalysisGroupButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addAnalysisGroupButtonActionPerformed
        // TODO add your handling code here:
        String temp = JOptionPane.showInputDialog(this);
        if (temp != null) {
            if (!temp.isEmpty()) {
                projectTree.addObject(new AnalysisGroup(temp));
            }
        }
    }//GEN-LAST:event_addAnalysisGroupButtonActionPerformed

    private void removeAnalysisGroupButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeAnalysisGroupButtonActionPerformed
        if (projectTree.getSelectionPath() != null) {
            if (projectTree.getSelectionPath().getLastPathComponent() instanceof AnalysisGroup) {
                projectTree.removeCurrentNode();
            }
        }
    }//GEN-LAST:event_removeAnalysisGroupButtonActionPerformed

    private void removeProjectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeProjectButtonActionPerformed
        // TODO add your handling code here:
        if (projectTree.getSelectionPath() != null) {
            if (projectTree.getSelectionPath().getLastPathComponent() instanceof Experiment) {
                selectedProjectsList.remove((Experiment) projectTree.getSelectionPath().getLastPathComponent());
                projectTree.removeCurrentNode();
            }
        }
    }//GEN-LAST:event_removeProjectButtonActionPerformed

    private void analyseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_analyseButtonActionPerformed

        boolean goAhead = false;
        //can we actually continue?
        List<AnalysisGroup> analysisList = new ArrayList<AnalysisGroup>();
        if (!selectedProjectsList.isEmpty() && referenceProject != null) {
            AnalysisGroup rogueProjects = new AnalysisGroup("Analysis");
            Enumeration tree = ((DefaultMutableTreeNode) projectTree.getModel().getRoot()).children();
            while (tree.hasMoreElements()) {
                Object anObject = tree.nextElement();
                if (((DefaultMutableTreeNode) anObject).getUserObject() instanceof Experiment) {
                    rogueProjects.addExperiment((Experiment) ((DefaultMutableTreeNode) anObject).getUserObject());
                } else if (((DefaultMutableTreeNode) anObject).getUserObject() instanceof AnalysisGroup) {
                    analysisList.add((AnalysisGroup) ((DefaultMutableTreeNode) anObject).getUserObject());
                }
                DataModeController.setDataSource(DataModeController.DataSource.DATABASE);
            }

            if (!rogueProjects.getExperiments().isEmpty()) {
                analysisList.add(rogueProjects);
            }
            goAhead = true;
            if (ownFastaCheckBox.isSelected() && fastaFile != null && goAhead) {
                //this sure as hell can be better
                DataModeController.setDb(DataModeController.Db.FASTA);
                ((FastaDataMode) DataModeController.getDb().getDataMode()).setFastaFile(fastaFile);
            } else if (ownFastaCheckBox.isSelected() && fastaFile == null) {
                goAhead = false;
            }
        }
        if (filterSubsetCheckBox.isSelected() && !accessionTextArea.getText().isEmpty()) {
            List<Protein> filterList = new ArrayList<Protein>();
            for (String accession : Arrays.asList(accessionTextArea.getText().split("\n"))) {
                filterList.add(new Protein(accession));
            }
            DataModeController.getDb().getDataMode().getViewPreparationForMode().setProteinsToFilter(filterList);
        }

        if (goAhead) {
            MainWindow window = new MainWindow();
            faultBarrier.addObserver(window);
            window.setVisible(true);
            this.dispose();
            window.collectData(referenceProject, analysisList);
        } else {
            JOptionPane.showMessageDialog(this, "please make sure you have a reference project, one or more projects to compare to and if requested, have supplied a fasta");
        }
    }//GEN-LAST:event_analyseButtonActionPerformed

    private void addFastaButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addFastaButtonActionPerformed
        JFileChooser fastaChooser = new JFileChooser();
        fastaChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        fastaChooser.setMultiSelectionEnabled(false);
        fastaChooser.showOpenDialog(this);
        this.fastaFile = fastaChooser.getSelectedFile();
        if (fastaFile != null) {
            fastaLocationTextField.setText(fastaFile.getName());
            ViewProperties.getInstance().setProperty(new Property(ViewPropertyEnum.PROTEINFASTALOCATION, fastaFile.getAbsolutePath()));
        }
    }//GEN-LAST:event_addFastaButtonActionPerformed

    private void ownFastaCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ownFastaCheckBoxActionPerformed
        if (ownFastaCheckBox.isSelected()) {
            addFastaButton.setEnabled(true);
            fastaFile = new File(ViewProperties.getInstance().getProperty(ViewPropertyEnum.PROTEINFASTALOCATION.getKey()));
            fastaLocationTextField.setText(fastaFile.getName());
        } else {
            addFastaButton.setEnabled(false);
        }
    }//GEN-LAST:event_ownFastaCheckBoxActionPerformed

    private void filterSubsetCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_filterSubsetCheckBoxActionPerformed
        if (filterSubsetCheckBox.isSelected()) {
            filterPanel.setVisible(true);
            this.pack();
            this.repaint();
        } else {
            filterPanel.setVisible(false);
            this.pack();
            this.repaint();
        }

    }//GEN-LAST:event_filterSubsetCheckBoxActionPerformed

    private void useLinkDbCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_useLinkDbCheckBoxActionPerformed
        if (useLinkDbCheckBox.isSelected()) {
            LinkDbLoginDialog loginDialog = new LinkDbLoginDialog();
            loginDialog.setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
        } else {
            if (useInternetCheckBox.isSelected()) {
                ProgramVariables.STRUCTUREDATASOURCE = new InternetStructureDataSource();
            } else {
                //accept own implementation or local sources? if own, make pluggable
            }
        }

    }//GEN-LAST:event_useLinkDbCheckBoxActionPerformed

    private void makeDbConnectionButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_makeDbConnectionButtonActionPerformed
        LoginDialog dialog = new LoginDialog(this, true, DatabaseProperties.getInstance().getProperties().getProperty(DataBasePropertyEnum.DBUSERNAME.getKey()),
                DatabaseProperties.getInstance().getProperties().getProperty(DataBasePropertyEnum.DBURL.getKey()),
                DatabaseProperties.getInstance().getProperties().getProperty(DataBasePropertyEnum.DBNAME.getKey()));
        dialog.setLocationRelativeTo(this);
        try {
            fillProjectList();
            projectTree.removeAll();
        } catch (Exception ex) {
            faultBarrier.handleException(ex);
            JOptionPane.showMessageDialog(this, "something went wrong while retrieving the list of projects:\n" + ex.getMessage());
        }
        this.revalidate();
        this.repaint();
    }//GEN-LAST:event_makeDbConnectionButtonActionPerformed

    private void filterSubsetCheckBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_filterSubsetCheckBox1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_filterSubsetCheckBox1ActionPerformed

    private void addMaskingAccessionButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addMaskingAccessionButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_addMaskingAccessionButtonActionPerformed

    private void removeAccessionMaskingButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeAccessionMaskingButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_removeAccessionMaskingButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane accessionScrollPane;
    private javax.swing.JTextArea accessionTextArea;
    private javax.swing.JButton addAnalysisGroupButton;
    private javax.swing.JButton addFastaButton;
    private javax.swing.JButton addMaskingAccessionButton;
    private javax.swing.JButton addReferenceProjectButton;
    private javax.swing.JButton analyseButton;
    private javax.swing.JTextField fastaLocationTextField;
    private javax.swing.JCheckBox filterCheckbox;
    private javax.swing.JPanel filterPanel;
    private javax.swing.JCheckBox filterSubsetCheckBox;
    private javax.swing.JCheckBox filterSubsetCheckBox1;
    private javax.swing.JButton importSubsetButton;
    private javax.swing.JButton jButton1;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItem1;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItem2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JRadioButtonMenuItem jRadioButtonMenuItem1;
    private javax.swing.JRadioButtonMenuItem jRadioButtonMenuItem2;
    private javax.swing.JRadioButtonMenuItem jRadioButtonMenuItem3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JButton loadAccessionMaskingFile;
    private javax.swing.JButton makeDbConnectionButton;
    private javax.swing.JCheckBox ownFastaCheckBox;
    private javax.swing.JList projectList;
    private com.compomics.pepshell.view.components.DragAndDropTree projectTree;
    private javax.swing.JTextArea referenceProjectTextBox;
    private javax.swing.JButton removeAccessionMaskingButton;
    private javax.swing.JButton removeAnalysisGroupButton;
    private javax.swing.JButton removeProjectButton;
    private javax.swing.JButton removeReferenceProjectButton;
    private javax.swing.JButton saveSubsetButton;
    private javax.swing.JButton toProjectTreeButton;
    private javax.swing.JCheckBoxMenuItem useInternetCheckBox;
    private javax.swing.JCheckBoxMenuItem useLinkDbCheckBox;
    // End of variables declaration//GEN-END:variables

    public void update(Observable o, Object o1) {
        if (o1 != null) {
            if (o1 instanceof Exception) {
                faultBarrier.handleException((Exception) o1);
            }
        }
    }

    private void fillProjectList() throws SQLException {
        projectList.setListData(DbDAO.getProjects().toArray());
    }
}
